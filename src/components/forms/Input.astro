---
import type { HTMLAttributes } from 'astro/types';
interface Props extends HTMLAttributes<'input'> {
    textarea?: boolean;
    name: string;
    label: string;
}
const { textarea = false, name, label, ...props } = Astro.props;
---

<div class="wrapper">
    {
        !textarea ? (
            <input
                data-target="form-input"
                name={name}
                {...props}
                class="input"
                aria-label={label}
                placeholder={label}
            />
        ) : (
            <textarea
                data-target="form-input"
                name={name}
                {...props}
                class="input textarea"
                aria-label={label}
                placeholder={label}
                rows="3"
            />
        )
    }
    <span class="input__error" data-target="input-error-msg"
        ><span data-target="input-error-body"></span><svg
            xmlns="http://www.w3.org/2000/svg"
            width="20"
            height="20"
            viewBox="0 0 20 20"
            fill="none"
        >
            <circle cx="10" cy="10" r="10" fill="white"></circle>
            <path
                fill-rule="evenodd"
                clip-rule="evenodd"
                d="M11 5H9V12H11V5ZM11 14H9V16H11V14Z"
                fill="#E7816B"></path>
        </svg></span
    >
</div>
<style lang="scss">
    .wrapper {
        width: 100%;
        position: relative;
    }
    .input {
        display: block;
        width: 100%;
        box-shadow: 0px 3px 0px var(--color-white);
        transition: box-shadow 0.2s ease;
        position: relative;
        color: var(--color-white);
        padding-inline: 1rem;
        padding-bottom: 0.75rem;
        font-size: 0.9375rem;
        font-style: normal;
        font-weight: 500;
        line-height: 1.73;
        &:placeholder-shown {
            box-shadow: 0px 1px 0px var(--color-white);
        }
        &:focus {
            box-shadow: 0px 3px 0px var(--color-white);
        }
        &::placeholder {
            font-size: 0.9375rem;
            color: var(--color-white);
            opacity: 0.5;
        }
        &__error {
            color: var(--color-white);
            font-size: 12px;
            font-style: italic;
            font-weight: 400;
            line-height: 26px; /* 216.667% */

            align-items: center;
            gap: 0.5rem;

            position: absolute;
            top: 0;
            right: 2px;
            display: none;
        }
    }
    .textarea {
        resize: none;
    }
    @media (min-width: 43.75rem) {
        .input {
            padding-inline: 1.5rem;
            &__error {
                right: 0.5rem;
            }
        }
    }
</style>
<script>
    const inputs = document.querySelectorAll('[data-target="form-input"]');
    inputs.forEach((input) => {
        input.addEventListener('input', () => {
            const error = input.nextElementSibling as HTMLElement;
            if (error) {
                error.style.display = 'none';
            }
        });
    });
</script>
